image: docker

services:
  - docker:dind

variables:
  DOCKER_UNIQ: "${CI_PROJECT_NAME}-build-${CI_PIPELINE_ID}"
  DOCKER_NAME: "${DOCKER_ACC}/${DOCKER_PKG}"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - prepare
  - build_core
  - build_php
  - release
#  - purge

default:
  tags:
    - docker

.tpl-base:
  before_script:
    # Base variables
    - DOCKER_PHP=$([[ $BUILD_VERSION == php* ]] && echo ${BUILD_VERSION:3:3} || echo "false")
    - DOCKER_TAIL=$([[ $BUILD_NPM == "true" ]] && echo "-npm" || echo "")
    - DOCKER_TAG=${BUILD_VERSION}${DOCKER_TAIL}
    - DOCKER_LOCAL=${CI_REGISTRY_IMAGE}:build-${CI_PIPELINE_ID}-${DOCKER_TAG}
    # Registry
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY

.tpl-matrix-core:
  parallel:
    matrix:
      - BUILD_VERSION: [ 'core' ]
        BUILD_NPM: [ 'false', 'true' ]

.tpl-matrix-php:
  parallel:
    matrix:
      # - BUILD_VERSION: [ 'php5.6', 'php7.0', 'php7.1', 'php7.2', 'php7.3', 'php7.4', 'php8.0', 'php8.1', 'php8.2', 'php8.3', 'php8.4' ]
      - BUILD_VERSION: [ 'php5.6' ]
        BUILD_NPM: [ 'false', 'true' ]

.tpl-matrix-all:
  parallel:
    matrix:
      # - BUILD_VERSION: [ 'core', 'php5.6', 'php7.0', 'php7.1', 'php7.2', 'php7.3', 'php7.4', 'php8.0', 'php8.1', 'php8.2', 'php8.3', 'php8.4' ]
      - BUILD_VERSION: [ 'core', 'php5.6' ]
        BUILD_NPM: [ 'false', 'true' ]

.tpl-build:
  extends:
    - .tpl-base
  script:
    # Build variables
    - BUILD_CACHE=${CI_REGISTRY_IMAGE}:cache-${CI_PIPELINE_ID}-core${DOCKER_TAIL}
    - BUILD_ARCH=${CI_RUNNER_EXECUTABLE_ARCH/\//-}
    - BUILD_IMAGE=$DOCKER_LOCAL-$BUILD_ARCH
    - BUILD_NAME=$DOCKER_UNIQ-$DOCKER_TAG-$BUILD_ARCH
    - BUILD_ARGS=$([ "$BUILD_VERSION" = "core" ] && echo "--no-cache --cache-to type=registry,ref=$BUILD_CACHE-$BUILD_ARCH,mode=max" || echo "--cache-from type=registry,ref=$BUILD_CACHE-$BUILD_ARCH")
    # Saving for after_script
    - echo $BUILD_NAME > var_build_name
    - echo $BUILD_IMAGE > var_build_image
    # Buildx Initing
    - docker context create "context-$CI_JOB_ID"
    - docker buildx create --name "builder-$CI_JOB_ID" --use "context-$CI_JOB_ID"
    # Build
    - docker buildx build $BUILD_ARGS --build-arg NPM_PACKAGE=$BUILD_NPM --build-arg PHP_VERSION=${DOCKER_PHP:-false} --platform $CI_RUNNER_EXECUTABLE_ARCH --tag $BUILD_IMAGE --progress=plain --provenance=false . --load
    - docker push $BUILD_IMAGE
    # Test
    - docker run --name $BUILD_NAME $BUILD_IMAGE >/dev/null 2>&1 &
    - echo "Waiting for container to be up and running (timeout 10 seconds)..." && sleep 10
    - docker exec $BUILD_NAME /bin/bash /health.sh
    - DOCKER_CODE=$?
    - if test $DOCKER_CODE -ne 0; then echo " - failed" && exit 1; fi
  after_script:
    # Cleaning
    - BUILD_NAME=$(cat var_build_name)
    - BUILD_IMAGE=$(cat var_build_image)
    - docker stop $BUILD_NAME || true
    - docker rm $BUILD_NAME || true
    - docker rmi $BUILD_IMAGE || true
    - docker buildx rm "builder-$CI_JOB_ID" || true
    - docker context rm "context-$CI_JOB_ID" || true
  needs:
    - job: prepare_ssl

prepare_ssl:
  stage: prepare
  script:
    - openssl dhparam -out ./ssl/dhparam.pem 4096
    - openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout ./ssl/default.key -out ./ssl/default.crt -subj '/C=NO/ST=Null/L=Null/O=Null/OU=Null/CN=Null'
  artifacts:
    name: $DOCKER_UNIQ
    expire_in: 1 hour
    paths:
      - ssl/
  tags:
    - linux-amd64

build_core_amd64:
  stage: build_core
  extends:
    - .tpl-build
    - .tpl-matrix-core
  needs:
    - job: prepare_ssl
  tags:
    - linux-amd64

build_core_arm64:
  stage: build_core
  extends:
    - .tpl-build
    - .tpl-matrix-core
  needs:
    - job: prepare_ssl
  tags:
    - linux-arm64


build_php_amd64:
  stage: build_php
  extends:
    - .tpl-build
    - .tpl-matrix-php
  needs:
    - job: prepare_ssl
    - job: build_core_amd64
  tags:
    - linux-amd64


build_php_arm64:
  stage: build_php
  extends:
    - .tpl-build
    - .tpl-matrix-php
  needs:
    - job: prepare_ssl
    - job: build_core_arm64
  tags:
    - linux-arm64

release:
  stage: release
  extends:
    - .tpl-base
    - .tpl-matrix-all
  variables:
    # Arch list
    DOCKER_ARCHS: "linux/amd64 linux/arm64"
  script:
    # Registry
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin
    # Composing
    - |
      DOCKER_IMAGES=""
      for DOCKER_ARCH in $DOCKER_ARCHS; do
        BUILD_ARCH=${DOCKER_ARCH/\//-}
        docker pull $DOCKER_LOCAL-$BUILD_ARCH
        DOCKER_IMAGES="$DOCKER_IMAGES $DOCKER_LOCAL-$BUILD_ARCH"
      done
      - docker buildx imagetools create --tag $DOCKER_NAME:$DOCKER_TAG $DOCKER_IMAGES
      - docker rmi $DOCKER_IMAGES || true
  tags:
    - linux-amd64

#`
#purge:
#  stage: purge
#  extends:
#    - .tpl-base
#    - .tpl-matrix-all
#  script:
#    # Arch list
#    - DOCKER_ARCH: "linux/amd64 linux/arm64"
#    # Registry
#    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin
#  tags:
#    - linux-amd64`